name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and Test
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Run type check
      run: npm run build

    - name: Run tests (if available)
      run: |
        if [ -f "package.json" ] && grep -q '"test"' package.json; then
          npm test
        else
          echo "No tests found, skipping..."
        fi

  # Build and Security Scan
  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Build application
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: .next/

  # Docker Build and Push
  docker:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Production (example with self-hosted runner)
  deploy:
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to server
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      run: |
        echo "Deployment would happen here"
        echo "Example commands:"
        echo "1. SSH to server: ssh -i \$DEPLOY_KEY \$DEPLOY_USER@\$DEPLOY_HOST"
        echo "2. Pull latest image: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "3. Update docker-compose: docker-compose --profile prod up -d"
        echo "4. Health check: curl -f http://localhost || exit 1"

  # Lighthouse Performance Audit (optional)
  lighthouse:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Lighthouse CI
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
      run: |
        npm install -g @lhci/cli@0.12.x
        echo "Lighthouse audit would run here"
        # lhci autorun --upload.target=temporary-public-storage

  # Notification
  notify:
    needs: [test, build, docker, deploy]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'

    steps:
    - name: Notify deployment status
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      run: |
        if [[ "${{ needs.deploy.result }}" == "success" ]]; then
          echo "✅ Deployment successful!"
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"✅ Portfolio deployment successful!"}' \
          #   $SLACK_WEBHOOK
        else
          echo "❌ Deployment failed!"
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"❌ Portfolio deployment failed!"}' \
          #   $SLACK_WEBHOOK
        fi 